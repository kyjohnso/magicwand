#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_FXAS21002C.h>
#include <Adafruit_FXOS8700.h>

int buttonPin = 21;

float accum;
int hold_out = 0;
int counter = 0;
int i, j, p, q, r, command;

const int pinArray[4] = {9,10,11,13};

const int n_lookback = n_lookback_str;
const int n_features = n_features_str;
const int n_commands = n_commands_str; 

float input[n_lookback*n_features] =
input_str

float output[n_commands] = 
output_str

float weights[n_lookback*n_features][n_commands] = 
weights_str

float biases[n_commands] = 
biases_str

/* Assign a unique ID to this sensor at the same time */
Adafruit_FXAS21002C gyro = Adafruit_FXAS21002C(0x0021002C);
Adafruit_FXOS8700 accelmag = Adafruit_FXOS8700(0x8700A, 0x8700B);

void displaySensorDetails(void)
{
    sensor_t sensor;
    gyro.getSensor(&sensor);
    Serial.println("------------------------------------");
    Serial.print  ("Sensor:       "); Serial.println(sensor.name);
    Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
    Serial.print  ("Unique ID:    0x"); Serial.println(sensor.sensor_id, HEX);
    Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); 
    Serial.println(" rad/s");
    Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); 
    Serial.println(" rad/s");
    Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); 
    Serial.println(" rad/s");
    Serial.println("------------------------------------");
    Serial.println("");
    delay(500);

    sensor_t accel, mag;
    accelmag.getSensor(&accel, &mag);
    Serial.println("------------------------------------");
    Serial.println("ACCELEROMETER");
    Serial.println("------------------------------------");
    Serial.print  ("Sensor:       "); Serial.println(accel.name);
    Serial.print  ("Driver Ver:   "); Serial.println(accel.version);
    Serial.print  ("Unique ID:    0x"); Serial.println(accel.sensor_id, HEX);
    Serial.print  ("Min Delay:    "); Serial.print(accel.min_delay); 
    Serial.println(" s");
    Serial.print  ("Max Value:    "); Serial.print(accel.max_value, 4); 
    Serial.println(" m/s^2");
    Serial.print  ("Min Value:    "); Serial.print(accel.min_value, 4); 
    Serial.println(" m/s^2");
    Serial.print  ("Resolution:   "); Serial.print(accel.resolution, 8); 
    Serial.println(" m/s^2");
    Serial.println("------------------------------------");
    Serial.println("");
    Serial.println("------------------------------------");
    Serial.println("MAGNETOMETER");
    Serial.println("------------------------------------");
    Serial.print  ("Sensor:       "); Serial.println(mag.name);
    Serial.print  ("Driver Ver:   "); Serial.println(mag.version);
    Serial.print  ("Unique ID:    0x"); Serial.println(mag.sensor_id, HEX);
    Serial.print  ("Min Delay:    "); Serial.print(accel.min_delay); 
    Serial.println(" s");
    Serial.print  ("Max Value:    "); Serial.print(mag.max_value); 
    Serial.println(" uT");
    Serial.print  ("Min Value:    "); Serial.print(mag.min_value); 
    Serial.println(" uT");
    Serial.print  ("Resolution:   "); Serial.print(mag.resolution); 
    Serial.println(" uT");
    Serial.println("------------------------------------");
    Serial.println("");
    delay(500);

}

void setup(void)
{
    Serial.begin(9600);

    gyro.begin();
    accelmag.begin();

    pinMode(9, OUTPUT);
    pinMode(10, OUTPUT);
    pinMode(11, OUTPUT);
    pinMode(13, OUTPUT);
}

void loop(void)
{
    /* Get a new sensor event */
    sensors_event_t event;
    gyro.getEvent(&event);
    
    sensors_event_t aevent, mevent;
    accelmag.getEvent(&aevent, &mevent);

    input[0] = aevent.acceleration.x;
    input[1] = aevent.acceleration.y;
    input[2] = aevent.acceleration.z;
    input[3] = event.gyro.x;
    input[4] = event.gyro.y;
    input[5] = event.gyro.z;

    /* print the input to show that it is updating correctly
    for( i = 0 ; i < n_lookback ; i++) {
        for( j = 0 ; j < n_features ; j++) {
            Serial.print(input[i*n_features+j]);
            Serial.print(',');
        }
        Serial.println(';');
    }
    Serial.println(';');
    */
    /* Display the results
    Serial.print("AcX = "); Serial.print(input[0], 4); 
    Serial.print(" | ");
    Serial.print("AcY = "); Serial.print(input[1], 4); 
    Serial.print(" | ");
    Serial.print("AcZ = "); Serial.print(input[2], 4); 
    Serial.print(" | ");
    Serial.print("GyX = "); Serial.print(input[3]); 
    Serial.print(" | ");
    Serial.print("GyY = "); Serial.print(input[4]); 
    Serial.print(" | ");
    Serial.print("GyZ = "); Serial.println(input[5]); 
    */

    //accumulate the inputs * weights + biases 
    for( i = 0 ; i < n_commands ; i++) { 
        accum = biases[i];
        for (j = 0; j < (n_lookback * n_features); j++) {
            accum += input[j] * weights[j][i];
        }
        output[i] = exp(accum);
    }
    for( i = 0 ; i < 4 ; i++) {
        digitalWrite(pinArray[i], LOW);
    }
    if ( command == 1) {
        digitalWrite(pinArray[1], HIGH);
    }
    if ( command == 2) {
        digitalWrite(pinArray[3], HIGH);
    }
    if ( command == 3) {
        digitalWrite(pinArray[2], HIGH);
    }
    if ( command == 4) {
        digitalWrite(pinArray[0], HIGH);
    }

    /*display the outputs
    for( i = 0 ; i < n_commands ; i++) {
        Serial.print(output[i]);
        Serial.print(',');
    }
    Serial.println(';');    
    */
    if (hold_out) {
        counter += 1;
    }
    else {
        command = 0;
        for( i = 1 ; i < n_commands ; i++) {
            if (output[i]>(1.5*output[command])) {
                command = i;
                hold_out = 1;
            }
        }
    }
    if ( counter > 10 ) {
        hold_out = 0;
        counter = 0;
    }
    Serial.print("command = "); Serial.println(command);

    // Shift all of the inputs by n_features
    for( i = (n_lookback-1); i > 0; i--) {
        for( j = 0; j < n_features; j++) {
            input[i*n_features+j] = input[(i-1)*n_features+j];
        }
    }

    delay(100);
}
